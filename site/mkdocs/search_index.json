{
    "docs": [
        {
            "location": "/", 
            "text": "Athenian Robotics\n\n\nThe Athenian Robotics Github home is \nhere\n.", 
            "title": "Home"
        }, 
        {
            "location": "/#athenian-robotics", 
            "text": "The Athenian Robotics Github home is  here .", 
            "title": "Athenian Robotics"
        }, 
        {
            "location": "/mkdocs/", 
            "text": "MkDocs Notes\n\n\nFor full documentation visit \nmkdocs.org\n.\n\n\nCommands\n\n\n\n\nmkdocs new [dir-name]\n - Create a new project.\n\n\nmkdocs serve\n - Start the live-reloading docs server.\n\n\nmkdocs build\n - Build the documentation site.\n\n\nmkdocs help\n - Print this help message.\n\n\n\n\nProject Layout\n\n\nmkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\nsite/         # Generated website", 
            "title": "MkDocs"
        }, 
        {
            "location": "/mkdocs/#mkdocs-notes", 
            "text": "For full documentation visit  mkdocs.org .", 
            "title": "MkDocs Notes"
        }, 
        {
            "location": "/mkdocs/#commands", 
            "text": "mkdocs new [dir-name]  - Create a new project.  mkdocs serve  - Start the live-reloading docs server.  mkdocs build  - Build the documentation site.  mkdocs help  - Print this help message.", 
            "title": "Commands"
        }, 
        {
            "location": "/mkdocs/#project-layout", 
            "text": "mkdocs.yml    # The configuration file.\ndocs/\n    index.md  # The documentation homepage.\n    ...       # Other markdown pages, images and other files.\nsite/         # Generated website", 
            "title": "Project Layout"
        }, 
        {
            "location": "/mqtt/", 
            "text": "MQTT Notes\n\n\nMQTT Broker Installation\n\n\nOSX\n\n\nTo install mosquitto:\n\n\n$ brew install mosquitto\n\n\n\n\nTo add mosquitto to launchd:\n\n\n$ brew services start mosquitto\n\n\n\n\nIf you don't want to run mosquitto as a background service:\n\n\n$ /usr/local/sbin/mosquitto -c /usr/local/etc/mosquitto/mosquitto.conf\n\n\n\n\nDocker\n\n\nTo run mosquitto as a docker service:\n\n\n$ docker run -ti -p 1883:1883 -p 9001:9001 toke/mosquitto\n\n\n\n\nImage details are \nhere\n\n\nRaspberry Pi\n\n\n$ sudo apt-get install mosquitto\n$ sudo apt-get install mosquitto-clients\n\n\n\n\nTesting from CLI\n\n\nSubscribe\n\n\n$ mosquitto_sub -d -h localhost -t /testnode\nClient mosqsub/27524-pleiku.lo sending CONNECT\nClient mosqsub/27524-pleiku.lo received CONNACK\nClient mosqsub/27524-pleiku.lo sending SUBSCRIBE (Mid: 1, Topic: /testnode, QoS: 0)\nClient mosqsub/27524-pleiku.lo received SUBACK\nSubscribed (mid: 1): 0\n\n\n\n\nPublish\n\n\n$ mosquitto_pub -d -h localhost -m \nsimple val\n -t /testnode\nClient mosqpub/27472-pleiku.lo sending CONNECT\nClient mosqpub/27472-pleiku.lo received CONNACK\nClient mosqpub/27472-pleiku.lo sending PUBLISH (d0, q0, r0, m1, '/testnode', ... (10 bytes))\nClient mosqpub/27472-pleiku.lo sending DISCONNECT", 
            "title": "MQTT"
        }, 
        {
            "location": "/mqtt/#mqtt-notes", 
            "text": "", 
            "title": "MQTT Notes"
        }, 
        {
            "location": "/mqtt/#mqtt-broker-installation", 
            "text": "", 
            "title": "MQTT Broker Installation"
        }, 
        {
            "location": "/mqtt/#osx", 
            "text": "To install mosquitto:  $ brew install mosquitto  To add mosquitto to launchd:  $ brew services start mosquitto  If you don't want to run mosquitto as a background service:  $ /usr/local/sbin/mosquitto -c /usr/local/etc/mosquitto/mosquitto.conf", 
            "title": "OSX"
        }, 
        {
            "location": "/mqtt/#docker", 
            "text": "To run mosquitto as a docker service:  $ docker run -ti -p 1883:1883 -p 9001:9001 toke/mosquitto  Image details are  here", 
            "title": "Docker"
        }, 
        {
            "location": "/mqtt/#raspberry-pi", 
            "text": "$ sudo apt-get install mosquitto\n$ sudo apt-get install mosquitto-clients", 
            "title": "Raspberry Pi"
        }, 
        {
            "location": "/mqtt/#testing-from-cli", 
            "text": "", 
            "title": "Testing from CLI"
        }, 
        {
            "location": "/mqtt/#subscribe", 
            "text": "$ mosquitto_sub -d -h localhost -t /testnode\nClient mosqsub/27524-pleiku.lo sending CONNECT\nClient mosqsub/27524-pleiku.lo received CONNACK\nClient mosqsub/27524-pleiku.lo sending SUBSCRIBE (Mid: 1, Topic: /testnode, QoS: 0)\nClient mosqsub/27524-pleiku.lo received SUBACK\nSubscribed (mid: 1): 0", 
            "title": "Subscribe"
        }, 
        {
            "location": "/mqtt/#publish", 
            "text": "$ mosquitto_pub -d -h localhost -m  simple val  -t /testnode\nClient mosqpub/27472-pleiku.lo sending CONNECT\nClient mosqpub/27472-pleiku.lo received CONNACK\nClient mosqpub/27472-pleiku.lo sending PUBLISH (d0, q0, r0, m1, '/testnode', ... (10 bytes))\nClient mosqpub/27472-pleiku.lo sending DISCONNECT", 
            "title": "Publish"
        }, 
        {
            "location": "/plotly/", 
            "text": "Plot.ly Notes\n\n\nFor full documentation visit \nplot.ly\n.\n\n\nOne-time Setup\n\n\nBefore using plot.ly, follow these steps:\n\n\n1) \nSign up\n and create a plot.ly account. Notice that \nyou can click on the Github logo and use your GitHub credentials to sign up.\n\n\n2) Create your credentials file:\n\n\n$ pip install plotly\n$ python\n\n import plotly\n\n plotly.tools.set_credentials_file(username='YourName', api_key='YourKey')\n\n\n\n\nThis will create a \n~/.plotly/.credentials\n file. \n\n\n3) You will be using \nplot.ly streams\n, \nso create some streaming API tokens\n\nhere\n. You should create 3 to start.\n\n\n4) Manually add the newly created streaming API tokens to \n~/.plotly/.credentials\n: \n\n\n{\n    \nusername\n: \nYourName\n,\n    \nstream_ids\n: [\n        \nid1\n,\n        \nid2\n,\n        \nid3\n\n    ],\n    \napi_key\n: \nYourKey\n,\n    \nproxy_username\n: \n,\n    \nproxy_password\n: \n\n}\n\n\n\n\nPython API\n\n\nOnce your streaming API tokens are added, you can use them in your code without \na hard-coded reference:\n\n\nimport plotly.plotly as py\nimport plotly.tools as tls\n\nstream_ids = tls.get_credentials_file()['stream_ids']\n# Use the first streaming API token\nstream_id = stream_ids[0]\nstream = py.Stream(stream_id)\nstream.open()", 
            "title": "Plot.ly"
        }, 
        {
            "location": "/plotly/#plotly-notes", 
            "text": "For full documentation visit  plot.ly .", 
            "title": "Plot.ly Notes"
        }, 
        {
            "location": "/plotly/#one-time-setup", 
            "text": "Before using plot.ly, follow these steps:  1)  Sign up  and create a plot.ly account. Notice that \nyou can click on the Github logo and use your GitHub credentials to sign up.  2) Create your credentials file:  $ pip install plotly\n$ python  import plotly  plotly.tools.set_credentials_file(username='YourName', api_key='YourKey')  This will create a  ~/.plotly/.credentials  file.   3) You will be using  plot.ly streams , \nso create some streaming API tokens here . You should create 3 to start.  4) Manually add the newly created streaming API tokens to  ~/.plotly/.credentials :   {\n     username :  YourName ,\n     stream_ids : [\n         id1 ,\n         id2 ,\n         id3 \n    ],\n     api_key :  YourKey ,\n     proxy_username :  ,\n     proxy_password :  \n}", 
            "title": "One-time Setup"
        }, 
        {
            "location": "/plotly/#python-api", 
            "text": "Once your streaming API tokens are added, you can use them in your code without \na hard-coded reference:  import plotly.plotly as py\nimport plotly.tools as tls\n\nstream_ids = tls.get_credentials_file()['stream_ids']\n# Use the first streaming API token\nstream_id = stream_ids[0]\nstream = py.Stream(stream_id)\nstream.open()", 
            "title": "Python API"
        }, 
        {
            "location": "/python-admin/", 
            "text": "Python Administration\n\n\nInstallation\n\n\nOSX\n\n\nInstallation details are \n\nhere\n.\n\n\nPython3 requires \ngcc\n, which you can get by installing \n\nXCode\n or \n\nCommand Line Tools\n.\n\n\nInstall python3 and pip3 with:\n\n\n$ brew install python3\n\n\n\n\nEV3\n\n\nInstall python3 and pip3:\n\n\n$ sudo apt-get install python3\n$ sudo apt-get install python3-pip\n\n\n\n\nPackage Management\n\n\nDetermine installed packages with:\n\n\n$ pip3 list \n\n\n\n\nDetermine outdated packages with:\n\n\n$ pip3 list --outdated\n\n\n\n\nInstall a package with:\n\n\n$ pip3 install pkg_name\n\n\n\n\nUpdate a package with:\n\n\n$ pip3 install --upgrade pkg_name", 
            "title": "Python"
        }, 
        {
            "location": "/python-admin/#python-administration", 
            "text": "", 
            "title": "Python Administration"
        }, 
        {
            "location": "/python-admin/#installation", 
            "text": "", 
            "title": "Installation"
        }, 
        {
            "location": "/python-admin/#osx", 
            "text": "Installation details are  here .  Python3 requires  gcc , which you can get by installing  XCode  or  Command Line Tools .  Install python3 and pip3 with:  $ brew install python3", 
            "title": "OSX"
        }, 
        {
            "location": "/python-admin/#ev3", 
            "text": "Install python3 and pip3:  $ sudo apt-get install python3\n$ sudo apt-get install python3-pip", 
            "title": "EV3"
        }, 
        {
            "location": "/python-admin/#package-management", 
            "text": "Determine installed packages with:  $ pip3 list   Determine outdated packages with:  $ pip3 list --outdated  Install a package with:  $ pip3 install pkg_name  Update a package with:  $ pip3 install --upgrade pkg_name", 
            "title": "Package Management"
        }, 
        {
            "location": "/ev3-admin/", 
            "text": "EV3 Administration\n\n\nFor full ev3dev documentation visit \n\nhere\n.\n\n\nFor full ev3dev Python documentation visit \n\nhere\n.\n\n\nConnecting\n\n\nThe default username/password is: robot/maker\n\n\nConnect to an EV3 named \nev3dev1.local\n with:\n\n\n$ ssh robot@ev3dev1.local\n\n\n\n\nCopy files to an EV3 named \nev3dev1.local\n with a \nsftp\n session:\n\n\n$ sftp robot@ev3dev1.local\nrobot@ev3dev3.local's password: \nConnected to ev3dev3.local.\nsftp\n put file_name\n\n\n\n\nExit from \nsftp\n with ctrl-D.\n\n\nOr you can use \nscp\n:\n\n\n$ scp file_name robot@ev3dev1.local:/home/robot/\n\n\n\n\nUpdate Linux Bits\n\n\n$ sudo apt-get update\n$ sudo apt-get upgrade\n$ sudo apt-get dist-upgrade\n$ sudo reboot now\n\n\n\n\nEV3 Python Bindings\n\n\nInstall the EV3 Python bindings with:\n\n\n@ pip install python-ev3dev", 
            "title": "EV3"
        }, 
        {
            "location": "/ev3-admin/#ev3-administration", 
            "text": "For full ev3dev documentation visit  here .  For full ev3dev Python documentation visit  here .", 
            "title": "EV3 Administration"
        }, 
        {
            "location": "/ev3-admin/#connecting", 
            "text": "The default username/password is: robot/maker  Connect to an EV3 named  ev3dev1.local  with:  $ ssh robot@ev3dev1.local  Copy files to an EV3 named  ev3dev1.local  with a  sftp  session:  $ sftp robot@ev3dev1.local\nrobot@ev3dev3.local's password: \nConnected to ev3dev3.local.\nsftp  put file_name  Exit from  sftp  with ctrl-D.  Or you can use  scp :  $ scp file_name robot@ev3dev1.local:/home/robot/", 
            "title": "Connecting"
        }, 
        {
            "location": "/ev3-admin/#update-linux-bits", 
            "text": "$ sudo apt-get update\n$ sudo apt-get upgrade\n$ sudo apt-get dist-upgrade\n$ sudo reboot now", 
            "title": "Update Linux Bits"
        }, 
        {
            "location": "/ev3-admin/#ev3-python-bindings", 
            "text": "Install the EV3 Python bindings with:  @ pip install python-ev3dev", 
            "title": "EV3 Python Bindings"
        }
    ]
}